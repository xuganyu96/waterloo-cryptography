\ProvidesPackage{kyber-algos}

\newcommand{\kybercpapkekeygen}{
    \begin{algorithm}[H]
        \caption{$\texttt{Kyber.CPAPKE.KeyGen}()$}\label{alg:kyber-cpapke-keygen}
        \begin{algorithmic}[1]
            \State $d \leftarrow \mathcal{B}^{32}$
            \State $(\rho, \sigma) \leftarrow G(d)$
                \Comment{$G$ is instantiated with \texttt{SHA3-512}}
            \State $N \leftarrow 0$
            \For{$i \in \{0, 1, \ldots, k-1\}$}
                \For{$j \in \{0, 1, \ldots, k-1\}$}
                    \State $\hat{A}_{i,j} \leftarrow 
                        \texttt{Parse}(
                            \texttt{XOF}(\rho, j, i)
                        )
                    $
                    \Comment{\texttt{XOF} instantiated with \texttt{Shake128}}
                \EndFor
            \EndFor
            \For{$i \in \{0, 1, \ldots, k-1\}$}
                \State $\mathbf{s}_i \leftarrow \texttt{CBD}_{\eta_1}(
                    \texttt{PRF}(\sigma, N)
                )$
                \State $N \leftarrow N + 1$
            \EndFor
            \For{$i \in \{0, 1, \ldots, k-1\}$}
                \State $\mathbf{e}_i \leftarrow \texttt{CBD}_{\eta_1}(
                    \texttt{PRF}(\sigma, N)
                )$
                \State $N \leftarrow N + 1$
            \EndFor
            \State $\hat{\mathbf{s}} \leftarrow \texttt{NTT}(\mathbf{s})$
            \State $\hat{\mathbf{e}} \leftarrow \texttt{NTT}(\mathbf{e})$
            \State $\hat{\mathbf{t}} \leftarrow 
                \hat{A} \cdot \hat{\mathbf{s}} + \hat{\mathbf{e}}$
            \State $\pk \leftarrow (\hat{\mathbf{t}}, \rho)$
            \State $\sk \leftarrow \hat{\mathbf{s}}$
            \State \Return $(\pk, \sk)$
        \end{algorithmic}
    \end{algorithm}
}

\newcommand{\kybercpapkeenc}{
    \begin{algorithm}[H]
        \caption{$\texttt{Kyber.CPAPKE.Enc}(\pk, m, r)$}\label{alg:kyber-cpapke-enc}
        \begin{algorithmic}[1]
            \Require Public key $\pk = (\rho, \hat{\mathbf{t}})$
            \Require Message $m \in \mathcal{B}^{32}$
            \Require Random coin $r \in \mathcal{B}^{32}$
    
            \State $N \leftarrow 0$
            \State $(\hat{\mathbf{t}}, \rho) \leftarrow \pk$
                \Comment{Unpack and decode the public key}
            \For{$i \in \{0, 1, \ldots, k-1\}$}
                \For{$j \in \{0, 1, \ldots, k-1\}$}
                    \State $\hat{A}^\intercal [i][j] \leftarrow \texttt{Parse}(
                        \texttt{XOF}(
                            \rho, i, j
                        )
                    )$
                \EndFor
            \EndFor
            \For{$i \in \{0, 1, \ldots, k-1\}$}
                \State $\mathbf{r}[i] \leftarrow \texttt{CBD}_{\eta_1}(
                    \texttt{PRF}(
                        r, N
                    )
                )$
                \State $N \leftarrow N + 1$
            \EndFor
            \For{$i \in \{0, 1, \ldots, k-1\}$}
                \State $\mathbf{e}_1[i] \leftarrow \texttt{CBD}_{\eta_2}(
                    \texttt{PRF}(
                        r, N
                    )
                )$
                \State $N \leftarrow N + 1$
            \EndFor
            \State $e_2 \leftarrow \texttt{CBD}_{\eta_2}(
                \texttt{PRF}(r, N)
            )$
            \State $\hat{\mathbf{r}} \leftarrow \texttt{NTT}(\mathbf{r})$
            \State $\mathbf{c}_1 \leftarrow \texttt{NTT}^{-1}(
                \hat{A}^\intercal \cdot \hat{\mathbf{r}}
            ) + \mathbf{e}_1$
            \State $c_2 \leftarrow \texttt{NTT}^{-1}(
                \hat{\mathbf{t}} \cdot \hat{\mathbf{r}}
            ) + e_2 + m$
            \State \Return $c = (\mathbf{c}_1, c_2)$
        \end{algorithmic}
    \end{algorithm}
}

\newcommand{\kybercpapkedec}{
    \begin{algorithm}[H]
        \caption{$\texttt{Kyber.CPAPKE.Dec}(\sk, c)$}\label{alg:kyber-cpapke-dec}
        \begin{algorithmic}[1]
            \Require Secret key $\sk = \hat{\mathbf{s}}$
            \Require Ciphertext $c = (\mathbf{c}_1, c_2)$
            \State $\hat{\mathbf{s}} \leftarrow \sk$
            \State $(\mathbf{c}_1, c_2) \leftarrow c$
            \State $m \leftarrow c_2 - \texttt{NTT}^{-1}(
                \hat{\mathbf{s}} \cdot \texttt{NTT}(
                    \mathbf{c}_1
                )
            )$
            \State \Return $\texttt{Round}(m)$
        \end{algorithmic}
    \end{algorithm}
}

\newcommand{\kyberccakemkeygen}{
    \begin{algorithm}[H]
        \caption{\texttt{Kyber.CCAKEM.KeyGen()}}
        \begin{algorithmic}[1]
            \State $z \leftsample \mathcal{B}^{32}$
                \Comment{Randomly sample 32 bytes (256 bits)}
            \State $(\pk, \sk^\prime) \leftsample \texttt{Kyber.CPAPKE.KeyGen()}$
            \State $\sk = (\sk^\prime, \pk, H(\pk), z)$
                \Comment{H is instantiated with SHA3-256}
            \State \Return $(\pk, \sk)$
        \end{algorithmic}
    \end{algorithm}
}

\newcommand{\kyberccakemencap}{
    \begin{algorithm}[H]
        \caption{\texttt{Kyber.CCAKEM.Encap(\pk)}}
        \begin{algorithmic}[1]
            \State $m \leftsample \mathcal{B}^{32}$
            \State $m \leftarrow H(m)$
                \Comment{Do not output system RNG directly}
            \State $(\bar{K}, r) \leftarrow G(m \Vert H(\pk))$
                \Comment{G is instantiated with SHA3-512}
            \State $c \leftarrow \texttt{Kyber.CPAPKE.Enc(\pk, m, r)}$
                \Comment{Because $r$ is set, \texttt{CPAPKE} is deterministic}
            \State $K \leftarrow \texttt{KDF}(\bar{K} \Vert H(c))$
                \Comment{\texttt{KDF} is instantiated with Shake256}
            \State \Return $(c, K)$
        \end{algorithmic}
    \end{algorithm}
}

\newcommand{\kyberccakemdecap}{
    \begin{algorithm}[H]
        \caption{\texttt{Kyber.CCAKEM.Decap(\sk, c)}}
        \begin{algorithmic}[1]
            \Require Secret key $\sk = (\sk^\prime, \pk, H(\pk), z)$
            \Require \texttt{Kyber.CPAPKE} Ciphertext $c$
            \State $(\sk^\prime, \pk, h, z) \leftarrow \sk$
                \Comment{Unpack the secret key; $h$ is the hash of $\pk$}
            \State $m^\prime \leftarrow \texttt{Kyber.CPAPKE.Dec}(\sk^\prime, c)$
            \State $(\overline{K}^\prime, r^\prime) \leftarrow G(m^\prime \Vert h)$
            \State $c^\prime = \texttt{Kyber.CPAPKE.Enc}(\pk, m^\prime, r^\prime)$
            \If{$c = c^\prime$}
                \State $K \leftarrow \texttt{KDF}(\bar{K}^\prime \Vert H(c))$
            \Else
                \State $K \leftarrow \texttt{KDF}(z \Vert H(c))$
            \EndIf
            \State \Return $K$
        \end{algorithmic}
    \end{algorithm}
}